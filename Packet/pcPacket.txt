enum Type : uint8
{
    LOGIN_REQUEST
    LOGIN_RESPONSE
    
    ALLOC_HERO
    
    RANDOM_HERO_REQUEST
    RANDOM_HERO_RESPONSE
    
    MATCH_START
    MATCH_END
    
    GAME_DATA
    SKILL_DATA
    CHANGE_HERO_STATE
    
    SELECT_HERO
    VALID_SKILLS
    SKILL_RANGE_REQUEST
    SKILL_RANGE_RESPONSE
    SKILL_SHOT
    
    MOVE_HERO
    ACT_HERO
    DEAD_HERO
    
    TURN_END
    UPDATE_TURN
    
    REJECT
    
    HERO_STATE
    HERO_REMOVE_STATE

    EFFECT_RESPONSE

    REGISTER_ACCOUNT_REQUEST
    REGISTER_ACCOUNT_RESPONSE

    REQUEST_MATCH
    CANCEL_MATCH

    ENTER_LOBBY    
    CHAMPION_DATA
	
    TYPE_NUM
}

enum HeroClass : uint8
{
    FIGHTER = 0
    MAGICIAN = 1
    ARCHER = 2
    THIEF = 3
    PRIEST = 4
    MONK = 5
    NUM = 6
}

enum SkillType : uint8
{
    FIGHTER_ATTACK
    FIGHTER_CHARGE
    FIGHTER_HARD
    FIGHTER_IRON
    
    MAGICIAN_ICE_ARROW
    MAGICIAN_FIRE_BLAST
    MAGICIAN_THUNDER_STORM
    MAGICIAN_POLYMORPH
    
    ARCHER_ATTACK
    ARCHER_BACK_ATTACK
    ARCHER_PENETRATE_SHOT
    ARCHER_SNIPE
    
    THIEF_ATTACK
    THIEF_BACK_STEP
    THIEF_POISON
    THIEF_TAUNT
    
    PRIEST_HEAL
    PRIEST_ATTACK
    PRIEST_BUFF
    PRIEST_REMOVE_MAGIC
    
    MONK_ATTACK
    MONK_SACRIFICE
    MONK_PRAY
    MONK_KICK
}

enum StateType : uint8
{
    STATE_IRON
    STATE_POISON
    STATE_ICE
    STATE_BURN
    STATE_BUFF
    STATE_TAUNT
    STATE_SACRIFICE
    STATE_PRAY
}

packet Header
{
	Type type
    trash foo
}

packet LoginRequest : Header
{
	int8 idLength
	int8 passwordLength
	string16 id
	string16 password
}

enum LoginResult : uint8
{
	FAILED = 0
	SUCCESS = 1
}

packet LoginResponse : Header
{
	LoginResult result
}

packet AllocHero : Header
{
    int8 allocNum
    int8 x arr 4
    int8 y arr 4
}

packet RandomHeroRequest : Header
{
}

packet RandomHeroResponse : Header
{
    HeroClass heroClass arr 4
}

packet MatchStart : Header
{
    int8 turn
}

packet GameData : Header
{
    int8 turn
    int8 classNum
    HeroClass classes arr 4
    int8 hp arr 4
    int8 act arr 4
    int8 x arr 4
    int8 y arr 4
}

packet SkillData : Header
{
    int8 turn
    int8 heroIdx
    int8 skillNum
    SkillType skillType arr 4
    int8 skillLevel arr 4
}

packet MoveHero : Header
{
    int8 idx
    int8 x
    int8 y
}

packet ChangeHeroState : Header
{
    int8 turn
    int8 idx
    int8 maxHp
    int8 hp
    int8 maxAct
    int8 act
    int8 x
    int8 y
    int8 isMove
}

packet TurnEnd : Header
{
    int8 turn
}

packet UpdateTurn : Header
{
    int8 nowTurn
}

packet SelectHero : Header
{
    int8 idx
}

packet ValidSkills : Header
{
    int8 num
    int8 idx arr 6
}

packet SkillRangeRequest : Header
{
    int8 heroIdx
    int8 skillIdx
}

packet SkillRangeResponse : Header
{
    int8 heroIdx
    int8 skillIdx
    int8 isMyField
    int8 rangeNum
    int8 rangeX arr 9
    int8 rangeY arr 9
}

packet EffectResponse : Header
{
    int8 heroIdx
    int8 skillIdx
    int8 effectNum
    int8 effectX arr 9
    int8 effectY arr 9
}

packet ActHero : Header
{
    int8 heroIdx
    int8 skillIdx
    int8 x
    int8 y
}

packet SkillShot : Header
{
    int8 turn
    int8 heroIdx
    int8 skillIdx
    int8 effectNum
    int8 effectTurn arr 8
    int8 effectX arr 8
    int8 effectY arr 8
}

packet MatchEnd : Header
{
    int8 winner
}

packet Reject : Header
{
}

packet DeadHero : Header
{
    int8 turn
    int8 heroIdx
}

packet HeroState : Header
{
    StateType stateType
    int8 targetTurn
    int8 targetIdx
    int8 executerTurn
    int8 executerIdx
    int8 stateId
    int8 damaged
    int8 hp
    int8 act
    int8 attack
    int8 defence
    int8 duration
}

packet RemoveHeroState : Header
{
    int8 targetTurn
    int8 targetIdx
    int8 stateId
    StateType stateType
}

packet RegisterAccountRequest : Header
{
    int8 idLength
    char id arr 16
    int8 passwordLength
    char password arr 16
}

packet RegisterAccountResponse : Header
{
    int8 isSuccess
}

packet RequestMatch : Header
{
}

packet CancelMatch : Header
{
}

packet EnterLobby : Header
{
    int32 win
    int32 lose
    int8  championNum
}

packet championData : Header
{
    HeroClass type
    int8 level
    int8 hp
    int8 act
    int8 skillNum
    int8 skillType arr 4
    int8 skillLevel arr 4
}